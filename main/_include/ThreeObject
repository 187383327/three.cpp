//
// Created by byter on 29.07.17.
//

#ifndef THREECPP_OBJECT_H
#define THREECPP_OBJECT_H

#include <vector>
#include <memory>
#include <QUuid>
#include <QVector3D>
#include <QMatrix4x4>
#include <QQuaternion>

#include "Layers"
#include "math/Euler"

namespace three {

class ThreeObject
{
public:
  using Ptr = std::shared_ptr<ThreeObject>;

private:
  QUuid _uuid;
  QByteArray _name;

  Ptr parent;
  std::vector<Ptr> _children;
  QVector3D _up {0, 1, 0};

  QVector3D _position;
  math::Euler _rotation;
  QQuaternion _quaternion;
  QVector3D _scale {1, 1, 1};

  QMatrix4x4 _matrix;
  QMatrix4x4 _matrixWorld;

  bool _matrixAutoUpdate = true;
  bool _matrixWorldNeedsUpdate = false;

  Layers _layers;
  bool _visible = true;

  bool _castShadow = false;
  bool _receiveShadow = false;

  bool _frustumCulled = true;
  bool _renderOrder = 0;

protected:
  ThreeObject();
};

}

#endif //THREECPP_OBJECT_H
